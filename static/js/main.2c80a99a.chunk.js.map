{"version":3,"sources":["components/Square.js","components/Board.js","components/Button.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Button","styled","button","Game","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c80a99a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}","import React, { Component } from 'react';\nimport Square from './Square';\n\nexport default class Board extends Component {\n    renderSquare(i){\n        return <Square value={this.props.squares[i]}\n        onClick={()=>this.props.onClick(i)}\n        />\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"border-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"border-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"border-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n                \n            </div>\n        )\n    }\n}","// Adding Button Styling \nimport styled from 'styled-components';\nconst Button = styled.button`\n  background-color: black;\n  color: white;\n  font-size: 12px;\n  padding: 5px 10px;\n  border-radius: 5px;\n  margin: 10px 0px;\n  cursor: pointer;\n  background-color: #538fbe;\n  margin: 2px;\n  border: 1px solid #2d6898;\n  background-image: linear-gradient(bottom, rgb(73,132,180) 0%, rgb(97,155,203) 100%);\n  background-image: -o-linear-gradient(bottom, rgb(73,132,180) 0%, rgb(97,155,203) 100%);\n  background-image: -moz-linear-gradient(bottom, rgb(73,132,180) 0%, rgb(97,155,203) 100%);\n  background-image: -webkit-linear-gradient(bottom, rgb(73,132,180) 0%, rgb(97,155,203) 100%);\n  background-image: -ms-linear-gradient(bottom, rgb(73,132,180) 0%, rgb(97,155,203) 100%);\n  background-image: -webkit-gradient(\n      linear,\n      left bottom,\n      left top,\n      color-stop(0, rgb(73,132,180)),\n      color-stop(1, rgb(97,155,203))\n  );\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  border-radius: 5px;\n  text-shadow: 0px -1px 0px rgba(0,0,0,.5);\n  -webkit-box-shadow: 0px 6px 0px #2b638f, 0px 3px 15px rgba(0,0,0,.4), inset 0px 1px 0px rgba(255,255,255,.3), inset 0px 0px 3px rgba(255,255,255,.5);\n  -moz-box-shadow: 0px 6px 0px #2b638f, 0px 3px 15px rgba(0,0,0,.4), inset 0px 1px 0px rgba(255,255,255,.3), inset 0px 0px 3px rgba(255,255,255,.5);\n  box-shadow: 0px 6px 0px #2b638f, 0px 3px 15px rgba(0,0,0,.4), inset 0px 1px 0px rgba(255,255,255,.3), inset 0px 0px 3px rgba(255,255,255,.5);\n\n  ${'' /* Added Hover Effect */}\n  :hover{\n    background-image: linear-gradient(bottom, rgb(88,154,204) 0%, rgb(90,150,199) 100%);\n  background-image: -o-linear-gradient(bottom, rgb(88,154,204) 0%, rgb(90,150,199) 100%);\n  background-image: -moz-linear-gradient(bottom, rgb(88,154,204) 0%, rgb(90,150,199) 100%);\n  background-image: -webkit-linear-gradient(bottom, rgb(88,154,204) 0%, rgb(90,150,199) 100%);\n  background-image: -ms-linear-gradient(bottom, rgb(88,154,204) 0%, rgb(90,150,199) 100%);\n  \n \n  background-image: -webkit-gradient(\n      linear,\n      left bottom,\n      left top,\n      color-stop(0, rgb(88,154,204)),\n      color-stop(1, rgb(90,150,199))\n  }\n`;\n\nexport default Button;","import React, {Component} from 'react'\nimport Board from './Board'\nimport Button from './Button'\nexport default class Game extends Component{\n    // Defined Values of Game Object once initialised \n    constructor(props){\n        super(props);\n        this.state = {\n            xIsNext: true,\n            stepNumber: 0,\n            history: [\n                { squares: Array(9).fill(null)}\n            ]\n        }\n    }\n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step%2) ===0\n        })\n    }\n\n    handleClick(i){\n        const history = this.state.history.slice(0,this.state.stepNumber +1);\n        const current = history[history.length-1];\n        const squares = current.squares.slice();\n        const winner  = calculateWinner(squares);\n        if (winner || squares[i]){\n            return ;\n        }\n        squares[i]=this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat({\n                squares: squares\n            }),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        });\n    }\n    render(){\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step,move)=>{\n            const desc = move ? 'Go to #'+move: 'Reset';\n            return(\n                <li key={move}>\n                    <Button onClick={() => {this.jumpTo(move)}}>\n                        {desc}\n                    </Button>\n                </li>\n            )\n        });\n        let status;\n        if (winner) {\n            status = 'Winner is ' + winner;\n        } else {\n            status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board onClick={(i) => this.handleClick(i)}\n                        squares={current.squares} />\n                </div>\n                {/* This is what I need to style better */}\n                <div className=\"game-info\">\n                    <div className=\"win\">{status}</div>\n                    <ul>{moves}</ul>\n                </div>\n\n            </div>\n        )\n    }\n}\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return squares[a];\n        }\n    }\n\n    return null;\n}","//Imported Game from Components\n\nimport React from 'react';\nimport './App.css';\nimport Game from './components/Game'\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nserviceWorker.unregister();"],"sourceRoot":""}